@model IcraTakip

@{
    ViewData["Title"] = "Yeni İcra Takibi Oluştur";
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
    <style>
        :root {
            --halkbank-blue: #005baa;
            --halkbank-light-blue: #e6f0fa;
            --halkbank-green: #28a745;
            --halkbank-gray: #f0f2f5;
            --halkbank-red: #dc3545;
        }

        body {
            margin: 0;
            font-family: 'Segoe UI', sans-serif;
            background-color: var(--halkbank-gray);
        }

        .top-bar {
            background-color: var(--halkbank-blue);
            color: white;
            padding: 10px 25px;
            display: grid;
            grid-template-columns: 1fr auto 1fr;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .top-bar-left, .top-bar-right {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .top-bar-left {
            justify-self: start;
        }

        .top-bar-center {
            justify-self: center;
        }

        .top-bar-right {
            justify-self: end;
        }

        .page-title {
            font-size: 1.25em;
            font-weight: 600;
        }

        .icon-button {
            background: none;
            border: none;
            color: white;
            font-size: 1.5em;
            cursor: pointer;
            text-decoration: none;
        }

        .main-content {
            padding: 25px;
            max-width: 1200px;
            margin: auto;
        }

        .form-container {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .form-header {
            background-color: var(--halkbank-blue);
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 1.1em;
            font-weight: 600;
            border-radius: 8px 8px 0 0;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            padding: 25px;
        }

        .form-group {
            margin-bottom: 1rem;
        }

            .form-group label {
                display: block;
                margin-bottom: .5rem;
                font-weight: 500;
                font-size: 0.9em;
            }

            .form-group input, .form-group select {
                width: 100%;
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 5px;
                box-sizing: border-box;
            }

                .form-group input[readonly] {
                    background-color: #e9ecef;
                    cursor: not-allowed;
                }

        .form-actions {
            text-align: right;
            padding: 20px;
            border-top: 1px solid var(--halkbank-gray);
        }

        .save-button {
            background-color: var(--halkbank-green);
            color: white;
            padding: 12px 30px;
            border-radius: 5px;
            border: none;
            font-weight: 600;
            cursor: pointer;
            font-size: 1em;
        }

        .text-danger {
            color: var(--halkbank-red);
            font-size: 0.875em;
            margin-top: 4px;
            display: block;
            min-height: 1em;
        }

        .radio-button-group {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

            .radio-button-group input[type="radio"] {
                opacity: 0;
                position: fixed;
                width: 0;
            }

            .radio-button-group label {
                display: inline-block;
                background-color: var(--halkbank-light-blue);
                padding: 10px 20px;
                border-radius: 5px;
                border: 1px solid #b3c6e0;
                cursor: pointer;
                transition: all 0.2s ease;
            }

            .radio-button-group input[type="radio"]:checked + label {
                background-color: var(--halkbank-blue);
                color: white;
                border-color: var(--halkbank-blue);
            }
    </style>
</head>
<body>
    <header class="top-bar">
        <div class="top-bar-left">
            <a asp-action="Index" class="icon-button" title="İcra Takip Listesine Dön"><i class="fas fa-arrow-left"></i></a>
            <h1 class="page-title">Yeni İcra Takibi Oluştur</h1>
        </div>
        <div class="top-bar-center">
            <img src="~/img/halkbank-logo.png" alt="Halkbank Logo" style="height: 45px;" />
        </div>
        <div class="top-bar-right">
            <a asp-action="Login" asp-controller="Account" class="icon-button" title="Çıkış Yap"><i class="fas fa-sign-out-alt"></i></a>
        </div>
    </header>
    <main class="main-content">
        <form asp-action="Create" method="post" class="form-container" onsubmit="return formuDogrulaVeGonder(event)">
            @Html.AntiForgeryToken()
            <div class="form-header">İCRA TAKİP BİLGİLERİ</div>
            <div class="form-grid">
                <div class="form-column">
                    <div class="form-group"><label asp-for="MusteriId"></label><select asp-for="MusteriId" asp-items="ViewBag.Musteriler" class="form-control" id="musteriSelect" onchange="musteriSecildi()"><option value="">Borçlu Seçiniz...</option></select><span id="musteriError" class="text-danger"></span></div>
                    <div class="form-group"><label asp-for="AvukatId"></label><select asp-for="AvukatId" asp-items="ViewBag.Avukatlar" class="form-control" id="avukatSelect" onchange="avukatSecildi()"><option value="">Avukat Seçiniz...</option></select><span id="avukatError" class="text-danger"></span></div>
                    <div class="form-group"><label asp-for="AvukatTCKN"></label><input asp-for="AvukatTCKN" class="form-control" id="avukatTcknInput" readonly /></div>
                    <div class="form-group"><label asp-for="TakipTarihi"></label><input asp-for="TakipTarihi" type="date" class="form-control" value="@Model.TakipTarihi.ToString("yyyy-MM-dd")" id="takipTarihiInput" onchange="zorunluAlanDogrula('takipTarihiInput', 'takipTarihiError', 'Takip tarihi zorunludur.')" /><span id="takipTarihiError" class="text-danger"></span></div>
                    <div class="form-group">
                        <label asp-for="TakipTipi"></label>
                        <div class="radio-button-group">
                            <input type="radio" asp-for="TakipTipi" value="İlamlı Takip" id="takipIlamli" name="TakipTipi" onchange="takipTipiDogrula()" /><label for="takipIlamli">İlamlı Takip</label>
                            <input type="radio" asp-for="TakipTipi" value="İlamsız Takip" id="takipIlamsiz" name="TakipTipi" onchange="takipTipiDogrula()" /><label for="takipIlamsiz">İlamsız Takip</label>
                        </div>
                        <span id="takipTipiError" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-column">
                    <div class="form-group"><label asp-for="IhtarId"></label><select asp-for="IhtarId" class="form-control" id="ihtarSelect" disabled onchange="zorunluAlanDogrula('ihtarSelect', 'ihtarError', 'İhtar seçimi zorunludur.')"><option value="">Önce Borçlu Seçiniz...</option></select><span id="ihtarError" class="text-danger"></span></div>
                    <div class="form-group"><label asp-for="UrunId"></label><select asp-for="UrunId" class="form-control" id="urunSelect" disabled onchange="zorunluAlanDogrula('urunSelect', 'urunError', 'Ürün seçimi zorunludur.')"><option value="">Önce Borçlu Seçiniz...</option></select><span id="urunError" class="text-danger"></span></div>
                    <div class="form-group"><label asp-for="IcraMudurugu"></label><input asp-for="IcraMudurugu" class="form-control" id="icraMuduruguInput" oninput="icraMuduruguDogrula()" /><span id="icraMuduruguError" class="text-danger"></span></div>
                    <div class="form-group"><label asp-for="IcraDosyaNo"></label><input asp-for="IcraDosyaNo" class="form-control" id="icraDosyaNoInput" oninput="icraDosyaNoDogrula()" /><span id="icraDosyaNoError" class="text-danger"></span></div>
                    <div class="form-group"><label asp-for="MahiyetKodu"></label><input asp-for="MahiyetKodu" class="form-control" id="mahiyetKoduInput" oninput="mahiyetKoduDogrula()" /><span id="mahiyetKoduError" class="text-danger"></span></div>
                </div>
            </div>
            <div class="form-actions">
                <button type="submit" class="save-button"><i class="fas fa-save"></i> İcra Takibini Kaydet</button>
            </div>
        </form>
    </main>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const musteriSelect = document.getElementById('musteriSelect');
            const avukatSelect = document.getElementById('avukatSelect');
            musteriSelect.addEventListener('change', musteriSecildi);
            avukatSelect.addEventListener('change', avukatSecildi);
        });

        function formuDogrulaVeGonder(event) {
            zorunluAlanDogrula('musteriSelect', 'musteriError', 'Borçlu seçimi zorunludur.');
            zorunluAlanDogrula('avukatSelect', 'avukatError', 'Avukat seçimi zorunludur.');
            zorunluAlanDogrula('takipTarihiInput', 'takipTarihiError', 'Takip tarihi zorunludur.');
            takipTipiDogrula();
            zorunluAlanDogrula('ihtarSelect', 'ihtarError', 'İhtar seçimi zorunludur.');
            zorunluAlanDogrula('urunSelect', 'urunError', 'Ürün seçimi zorunludur.');
            icraMuduruguDogrula();
            icraDosyaNoDogrula();
            mahiyetKoduDogrula();

            const form = event.target;
            const errorSpans = form.querySelectorAll('.text-danger');
            let formGecerli = true;
            errorSpans.forEach(span => {
                if (span.textContent.trim() !== '') {
                    formGecerli = false;
                }
            });

            if (!formGecerli) {
                event.preventDefault();
                alert('Lütfen formdaki kırmızı ile belirtilen zorunlu veya hatalı alanları düzeltin.');
                return false;
            } else {
                gonderimButonunuKilitle(form);
                return true;
            }
        }

        function gonderimButonunuKilitle(formElement) {
            const button = formElement.querySelector('button[type="submit"]');
            if (button) {
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Kaydediliyor...';
            }
        }

        function musteriSecildi() {
            zorunluAlanDogrula('musteriSelect', 'musteriError', 'Borçlu seçimi zorunludur.');
            const musteriSelect = document.getElementById('musteriSelect');
            const ihtarSelect = document.getElementById('ihtarSelect');
            const urunSelect = document.getElementById('urunSelect');
            const musteriId = musteriSelect.value;
            ihtarSelect.innerHTML = '<option value="">Yükleniyor...</option>';
            urunSelect.innerHTML = '<option value="">Yükleniyor...</option>';
            ihtarSelect.disabled = true;
            urunSelect.disabled = true;
            if (!musteriId) {
                ihtarSelect.innerHTML = '<option value="">Önce Borçlu Seçiniz...</option>';
                urunSelect.innerHTML = '<option value="">Önce Borçlu Seçiniz...</option>';
                return;
            }
            fetch(`/IcraTakip/GetIhtarlarByMusteriId?musteriId=${musteriId}`).then(res => res.json()).then(data => {
                ihtarSelect.innerHTML = '<option value="">İhtar Seçiniz...</option>';
                data.forEach(item => ihtarSelect.add(new Option(item.ihtarNo, item.id)));
                ihtarSelect.disabled = false;
            });
            fetch(`/IcraTakip/GetUrunlerByMusteriId?musteriId=${musteriId}`).then(res => res.json()).then(data => {
                urunSelect.innerHTML = '<option value="">Ürün Seçiniz...</option>';
                data.forEach(item => urunSelect.add(new Option(item.urunAdi, item.id)));
                urunSelect.disabled = false;
            });
        }

        function avukatSecildi() {
            zorunluAlanDogrula('avukatSelect', 'avukatError', 'Avukat seçimi zorunludur.');
            const avukatSelect = document.getElementById('avukatSelect');
            const avukatTcknInput = document.getElementById('avukatTcknInput');
            const avukatId = avukatSelect.value;
            avukatTcknInput.value = '';
            if (!avukatId) return;
            fetch(`/IcraTakip/GetAvukatInfo?avukatId=${avukatId}`).then(res => res.json()).then(data => {
                if (data && data.tckn) { avukatTcknInput.value = data.tckn; }
            });
        }

        function zorunluAlanDogrula(inputId, errorId, mesaj) {
            const input = document.getElementById(inputId);
            const error = document.getElementById(errorId);
            if (!input.value) { error.textContent = mesaj; } else { error.textContent = ''; }
        }

        function takipTipiDogrula() {
            const error = document.getElementById('takipTipiError');
            if (!document.querySelector('input[name="TakipTipi"]:checked')) {
                error.textContent = 'Takip tipi zorunludur.';
            } else {
                error.textContent = '';
            }
        }

        function icraMuduruguDogrula() {
            const input = document.getElementById('icraMuduruguInput');
            const error = document.getElementById('icraMuduruguError');
            const harfRegex = /^[0-9a-zA-ZçÇğĞıİöÖşŞüÜ ]+$/;
            let message = '';
            if (!input.value) {
                message = 'İcra müdürlüğü zorunludur.';
            } else if (!harfRegex.input(value)) {
                message = 'İcra müdürlüğü alanına özel karakter giremezsiniz.';
            } else if (input.value.length > 50) {
                message = 'İcra müdürlüğü en fazla 50 karakter olabilir.';
            }
            error.textContent = message;
        }

        function icraDosyaNoDogrula() {
            const input = document.getElementById('icraDosyaNoInput');
            const error = document.getElementById('icraDosyaNoError');
            let message = '';
            if (!input.value) {
                message = 'İcra dosya no zorunludur.';
            } else if (!/^[0-9]*$/.test(input.value)) {
                message = 'Sadece rakam girilmelidir.';
            } else if (input.value.length > 8) {
                message = 'İcra Dosya No en fazla 8 rakam olabilir.';
            }
            error.textContent = message;
        }

        function mahiyetKoduDogrula() {
            const input = document.getElementById('mahiyetKoduInput');
            const error = document.getElementById('mahiyetKoduError');
            let message = '';
            if (!input.value) {
                message = 'Mahiyet kodu zorunludur.';
            } else if (!/^[0-9]*$/.test(input.value)) {
                message = 'Sadece rakam girilmelidir.';
            } else if (input.value.length > 12) {
                message = 'Mahiyet Kodu en fazla 12 rakam olabilir.';
            }
            error.textContent = message;
        }
    </script>
</body>
</html>
